controllers/commentController.js:
const Comment = require('../models/Comment');

exports.addComment = async (req, res) => {
    try {
        const comment = new Comment({
            content: req.body.content,
            postId: req.params.postId,
            authorId: req.user.id,
        });
        await comment.save();
        res.status(201).json(comment);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

exports.getCommentsByPostId = async (req, res) => {
    try {
        const comments = await Comment.find({ postId: req.params.postId }).populate('authorId', 'username');
        res.json(comments);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

controllers/postController.js:
const Post = require('../models/Post');

// Create a new post
exports.createPost = async (req, res) => {
    try {
        const post = new Post({ ...req.body, authorId: req.user.id }); // Ensure authorId is set from the authenticated user
        await post.save();
        res.status(201).json(post); // Return the created post with a 201 status
    } catch (error) {
        res.status(500).json({ message: error.message }); // Handle server errors
    }
};

// Get all posts
exports.getAllPosts = async (req, res) => {
    try {
        const posts = await Post.find().populate('authorId', 'username'); // Populate authorId to get username
        res.json(posts);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Get a single post by ID
exports.getPostById = async (req, res) => {
    try {
        const post = await Post.findById(req.params.id).populate('authorId', 'username'); // Populate authorId to get username
        if (!post) return res.status(404).json({ message: "Post not found" }); // Handle not found case
        res.json(post); // Return the post details
    } catch (error) {
        res.status(500).json({ message: error.message }); // Handle server errors
    }
};

// Update a post by ID
exports.updatePost = async (req, res) => {
    try {
        const post = await Post.findById(req.params.id);
        
        // Check if the post exists and if the user is authorized to update it
        if (!post || post.authorId.toString() !== req.user.id) {
            return res.status(403).json({ message: "Unauthorized" }); // Handle unauthorized access
        }

        Object.assign(post, req.body); // Update the post with new data
        await post.save(); // Save the updated post
        res.json(post); // Return the updated post details
    } catch (error) {
        res.status(500).json({ message: error.message }); // Handle server errors
    }
};

// Delete a post by ID
exports.deletePost = async (req, res) => {
    try {
        const post = await Post.findById(req.params.id);
        
        // Check if the post exists and if the user is authorized to delete it
        if (!post || (post.authorId.toString() !== req.user.id && !req.user.isAdmin)) {
            return res.status(403).json({ message: "Unauthorized" }); // Handle unauthorized access
        }

        await post.remove(); // Remove the post from the database
        res.json({ message: "Post deleted" }); // Confirm deletion
    } catch (error) {
        res.status(500).json({ message: error.message }); // Handle server errors
    }
};

controllers/userController.js:
// controllers/userController.js
const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// Register a new user
exports.register = async (req, res) => {
    try {
        const { username, email, password } = req.body;
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ username, email, password: hashedPassword });
        await user.save();
        res.status(201).json({ message: "User registered successfully" });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Login a user
exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        
        if (!user || !(await bcrypt.compare(password, user.password))) {
            return res.status(401).json({ message: "Invalid credentials" });
        }

        const token = jwt.sign({ id: user._id, isAdmin: user.isAdmin }, process.env.JWT_SECRET);
        res.json({ token });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// Get User details
exports.getUser = async (req, res) => {
    try {
        const user = await User.findById(req.user.id).select('-password'); // Exclude password from response
        res.json(user);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};


middlewares/authMiddleware.js:
const jwt = require('jsonwebtoken');

// Middleware to verify the token
exports.verifyToken = (req, res, next) => {
    const token = req.headers['authorization'];

    if (!token) return res.status(403).send("A token is required for authentication");

    try {
        // Split the token to get the actual token part after "Bearer "
        const decodedToken = jwt.verify(token.split(" ")[1], process.env.JWT_SECRET);
        req.user = decodedToken; // Attach decoded token to request object
        next(); // Proceed to the next middleware or route handler
    } catch (err) {
        return res.status(401).send("Invalid Token");
    }
};

// Middleware to check if user is admin
exports.isAdmin = (req, res, next) => {
    if (!req.user || !req.user.isAdmin) { // Ensure req.user is defined and check for admin status
        return res.status(403).send("Access denied. Admins only.");
    }
    next(); // Proceed to the next middleware or route handler
};

models/Comment.js:
const mongoose = require('mongoose');

const CommentSchema = new mongoose.Schema({
    content: { type: String, required: true },
    postId: { type: mongoose.Schema.Types.ObjectId, ref: 'Post' },
    authorId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Comment', CommentSchema);

models/Post.js:
const mongoose = require('mongoose');

const PostSchema = new mongoose.Schema({
    title: { type: String, required: true },
    content: { type: String, required: true },
    authorId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Post', PostSchema);

models/User.js:
// models/User.js

const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
    username: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    isAdmin: { type: Boolean, default: false } 
});

module.exports = mongoose.model('User', UserSchema);

routes/commentRoutes.js:
// routes/commentRoutes.js
const express = require('express');
const { addComment, getCommentsByPostId } = require('../controllers/commentController');
const authMiddleware = require('../middlewares/authMiddleware');

const router = express.Router();

// Updated route for adding a comment to a specific post
router.post('/:postId/comments', authMiddleware.verifyToken, addComment);

// Updated route to fetch all comments for a specific post
router.get('/:postId/comments', getCommentsByPostId);

module.exports = router;

routes/postRoutes.js:
// routes/postRoutes.js

const express = require('express');
const { createPost, getAllPosts, getPostById, updatePost, deletePost } = require('../controllers/postController');
const authMiddleware = require('../middlewares/authMiddleware');

const router = express.Router();

router.post('/', authMiddleware.verifyToken, createPost);
router.get('/', getAllPosts);
router.get('/:id', getPostById);
router.put('/:id', authMiddleware.verifyToken, updatePost);
router.delete('/:id', authMiddleware.verifyToken, authMiddleware.isAdmin, deletePost); 

module.exports = router;

routes/userRoutes.js:
// routes/userRoutes.js
const express = require('express');
const { register, login, getUser } = require('../controllers/userController');
const authMiddleware = require('../middlewares/authMiddleware');
const router = express.Router();

router.post('/register', register);
router.post('/login', login);
router.get('/user', authMiddleware.verifyToken, getUser); // Protected route

module.exports = router;

index.js:
// index.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log("MongoDB connected"))
    .catch(err => console.log(err));

// Import routes
const userRoutes = require('./routes/userRoutes');
const postRoutes = require('./routes/postRoutes');
const commentRoutes = require('./routes/commentRoutes');

// Use routes
app.use('/blog-app-API/users', userRoutes);
app.use('/blog-app-API/posts', postRoutes);
app.use('/blog-app-API/posts', commentRoutes); // Fixed route for comments

app.listen(process.env.PORT || 5000, () => {
    console.log(`Server running on port ${process.env.PORT || 5000}`);
});

.env:
MONGODB_URI=mongodb+srv://admin:admin@b495.mn674.mongodb.net/blog-app-API?retryWrites=true&w=majority&appName=b495
JWT_SECRET=blogAppAPI
PORT=5003